priority -50

extends c

# We want to overwrite everything in parent ft.
priority -49
###########################################################################
#			    Global functions 						  #
###########################################################################

global !p

def write_docstring_args(arglist, snip):
	args = str(arglist).split(',')

	c = 0
	for arg in args:
		lst_arg_tmp = arg.strip().rsplit(' ', 1)
		arg = '[%s]' % lst_arg_tmp[0] + ' '.join(lst_arg_tmp[1:])
		if c == 0:
			snip.rv += arg
			c = 1
		else:
			snip += '// @param[in] %s' % arg.strip()

endglobal

###########################################################################
#                            TextMate Snippets                            #
###########################################################################
snippet beginend "$1.begin(), $1.end() (beginend)"
${1:v}${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}begin(), $1${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}end()
endsnippet

snippet cl "class .. (class)"
class ${1:`!p snip.rv = snip.basename or "name"`} {
public:
	${1/(\w+).*/$1/} (${2:arguments});
	virtual ~${1/(\w+).*/$1/} ();

private:
	${0:/* data */}
};
endsnippet

snippet ns "namespace .. (namespace)"
namespace${1/.+/ /m}${1:`!p snip.rv = snip.basename or "name"`} {
	${VISUAL}$0
}${1/.+/ \/* /m}$1${1/.+/ *\/ /m}
endsnippet

snippet readfile "read file (readF)"
std::vector<char> v;
if (FILE *fp = fopen(${1:"filename"}, "r")) {
	char buf[1024];
	while(size_t len = fread(buf, 1, sizeof(buf), fp))
		v.insert(v.end(), buf, buf + len);
	fclose(fp);
}
endsnippet

snippet map "std::map (map)"
std::map<${1:key}, ${2:value}> map$0;
endsnippet

snippet vector "std::vector (v)"
std::vector<${1:char}> v$0;
endsnippet

snippet tp "template <typename ..> (template)"
template <typename ${1:_InputIter}>
endsnippet

snippet class "An entire .h generator" b
class ${1:`!v substitute(substitute(vim_snippets#Filename('$1','ClassName'),'^.','\u&',''), '_\(\w\)', '\u\1', 'g')`} {
public:
	$1();
	virtual ~$1();

private:
	$3
};
endsnippet

snippet func "Basic c++ doxygen function template" b
// ${4:brief}
//
// @param[in] `!p write_docstring_args(t[3],snip)`
//
// @return `!p snip.rv = t[1]`
${1:ReturnType} ${2:FunctionName}(${3:param});$0
endsnippet

snippet fdoc
// ${1:brief}
//
// @param[in] ${3}
//
// @return ${2}
endsnippet
# vim:ft=snippets:
