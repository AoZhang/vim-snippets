priority -50

extends c

# We want to overwrite everything in parent ft.
priority -49
###########################################################################
#			    Global functions 						  #
###########################################################################

global !p

def write_docstring_args(arglist, snip):
	args = str(arglist).split(',')

	c = 0
	for arg in args:
		lst_arg_tmp = arg.strip().rsplit(' ', 1)
		arg = '[%s]' % lst_arg_tmp[0] + ' '.join(lst_arg_tmp[1:])
		if c == 0:
			snip.rv += arg
			c = 1
		else:
			snip += '// @param[in]  %s' % arg.strip()

endglobal

###########################################################################
#                            TextMate Snippets                            #
###########################################################################
snippet beginend "$1.begin(), $1.end() (beginend)"
${1:v}${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}begin(), $1${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}end()
endsnippet

snippet class "An entire .h generator" b
class ${1:`!v substitute(substitute(vim_snippets#Filename('$1','ClassName'),'^.','\u&',''), '_\(\w\)', '\u\1', 'g')`} {
public:
	$1();
	virtual ~$1();

private:
	$3
};  /* class $1 */
endsnippet

snippet ns "namespace .. (namespace)"
namespace${1/.+/ /m}${1:`!p snip.rv = snip.basename or "name"`} {

${VISUAL}$0

}${1/.+/ \/* /m}namespace $1${1/.+/ *\/ /m}
endsnippet

snippet readfile "read file (readF)"
std::vector<char> v;
if (FILE *fp = fopen(${1:"filename"}, "r")) {
	char buf[1024];
	while(size_t len = fread(buf, 1, sizeof(buf), fp))
		v.insert(v.end(), buf, buf + len);
	fclose(fp);
}
endsnippet

snippet map "std::map (map)"
std::map<${1:key}, ${2:value}> map$0;
endsnippet

snippet vector "std::vector (v)"
std::vector<${1:char}> v$0;
endsnippet

snippet tp "template <typename ..> (template)"
template <typename ${1:_InputIter}>
endsnippet

snippet def "Basic c++ doxygen function template" b
// ${4:brief}
//
// @param[in]  `!p write_docstring_args(t[3],snip)`
//
// @return `!p snip.rv = t[1]`
${1:ReturnType} ${2:FunctionName}(${3:param});$0
endsnippet

snippet fdoc
// ${1:brief}
//
// @param[in]  ${3}
//
// @return ${2}
endsnippet

snippet for "for loop (for)"
for (${1:int} ${2:i} = ${3:0}; $2 < ${4:count}; ++$2) {
	${VISUAL}${0}
}
endsnippet

snippet fora "for auto loop (fora)"
for (auto${1:&} ${2:item}: ${3:iterable}) {
	${VISUAL}${0}
}
endsnippet

snippet ut
class ${1:`!v substitute(substitute(vim_snippets#Filename('$1','TestClassName'),'^.','\u&',''), '_\(\w\)', '\u\1', 'g')`}: public ::testing::Test  {
public:
	$1() {}
	virtual ~$1() {}

	// be called before the 1st test case
	static void SetUpTestCase() {}

	// be called after the last test case
	static void TearDownTestCase() {}

	// be called before each test case
	void SetUp() {}

	// be called after each test case
	void TearDown() {}
protected:
	${2:/* test variable */}
};

TEST_F($1, ${3:test_func_name_case_1}) {
	${4:/* test body */}
}

int main(int argc, char** argv) {
	::testing::InitGoogleTest(&argc, argv);
	return RUN_ALL_TESTS();
}
endsnippet

snippet testf
TEST_F(${1:`!v substitute(substitute(vim_snippets#Filename('$1','TestClassName'),'^.','\u&',''), '_\(\w\)', '\u\1', 'g')`}, ${2:test_func_name_case_1}) {
	${3:/* test body */}
}
endsnippet

snippet astrue "GTest Assersion: ASSERT_TRUE"
ASSERT_TRUE(${1:checked value})
endsnippet

snippet asfalse "GTest Assersion: ASSERT_FALSE"
ASSERT_FALSE(${1:checked value})
endsnippet

snippet aseq "GTest Assersion: ASSERT_EQ"
ASSERT_EQ(${1:ground true}, ${2:checked value})
endsnippet

snippet asge "GTest Assersion: ASSERT_GE"
ASSERT_GE(${1:ground true}, ${2:checked value})
endsnippet

snippet asgt "GTest Assersion: ASSERT_GT"
ASSERT_GT(${1:ground true}, ${2:checked value})
endsnippet

snippet asle "GTest Assersion: ASSERT_LE"
ASSERT_LE(${1:ground true}, ${2:checked value})
endsnippet

snippet aslt "GTest Assersion: ASSERT_LT"
ASSERT_LT(${1:ground true}, ${2:checked value})
endsnippet

snippet asne "GTest Assersion: ASSERT_NE"
ASSERT_NE(${1:ground true}, ${2:checked value})
endsnippet

snippet asstrcaseeq "GTest Assersion: ASSERT_STRCASEEQ"
ASSERT_STRCASEEQ(${1:ground true}, ${2:checked value})
endsnippet

snippet asstrcasene "GTest Assersion: ASSERT_STRCASENE"
ASSERT_STRCASENE(${1:ground true}, ${2:checked value})
endsnippet

snippet asstreq "GTest Assersion: ASSERT_STREQ"
ASSERT_STREQ(${1:ground true}, ${2:checked value})
endsnippet

snippet asstrne "GTest Assersion: ASSERT_STRNE"
ASSERT_STRNE(${1:ground true}, ${2:checked value})
endsnippet

snippet extrue "GTest Assersion: EXPECT_TRUE"
EXPECT_TRUE(${1:checked value})
endsnippet

snippet exfalse "GTest Assersion: EXPECT_FALSE"
EXPECT_FALSE(${1:checked value})
endsnippet

snippet exeq "GTest Assersion: EXPECT_EQ"
EXPECT_EQ(${1:ground true}, ${2:checked value})
endsnippet

snippet exge "GTest Assersion: EXPECT_GE"
EXPECT_GE(${1:ground true}, ${2:checked value})
endsnippet

snippet exgt "GTest Assersion: EXPECT_GT"
EXPECT_GT(${1:ground true}, ${2:checked value})
endsnippet

snippet exle "GTest Assersion: EXPECT_LE"
EXPECT_LE(${1:ground true}, ${2:checked value})
endsnippet

snippet exlt "GTest Assersion: EXPECT_LT"
EXPECT_LT(${1:ground true}, ${2:checked value})
endsnippet

snippet exne "GTest Assersion: EXPECT_NE"
EXPECT_NE(${1:ground true}, ${2:checked value})
endsnippet

snippet exstrcaseeq "GTest Assersion: EXPECT_STRCASEEQ"
EXPECT_STRCASEEQ(${1:ground true}, ${2:checked value})
endsnippet

snippet exstrcasene "GTest Assersion: EXPECT_STRCASENE"
EXPECT_STRCASENE(${1:ground true}, ${2:checked value})
endsnippet

snippet exstreq "GTest Assersion: EXPECT_STREQ"
EXPECT_STREQ(${1:ground true}, ${2:checked value})
endsnippet

snippet exstrne "GTest Assersion: EXPECT_STRNE"
EXPECT_STRNE(${1:ground true}, ${2:checked value})
endsnippet

# vim:ft=snippets:
